{
  "desc": {
    "parameters": [
      {
        "type": "ParameterTypeNumber",
        "index": 0,
        "name": "A_0",
        "paramId": "A_0",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 1,
        "name": "A_0",
        "paramId": "poly/A_0",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": false,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 2,
        "name": "A_1",
        "paramId": "poly/depthOne/A_1",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 3,
        "name": "A_2",
        "paramId": "poly/depthOne/depthTwo/A_2",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 4,
        "name": "A_3",
        "paramId": "poly/depthOne/depthTwo/depthThree/A_3",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 5,
        "name": "A_2",
        "paramId": "poly/depthOne/depthTwoPoly/A_2",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 6,
        "name": "A_3",
        "paramId": "poly/depthOne/depthTwoPoly/depthThree/A_3",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 7,
        "name": "A_2",
        "paramId": "poly/depthOne/depthTwoPolyExposed/A_2",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 8,
        "name": "1/A_2",
        "paramId": "poly/depthOne/depthTwoPolyExposed/1/A_2",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 9,
        "name": "2/A_2",
        "paramId": "poly/depthOne/depthTwoPolyExposed/2/A_2",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 10,
        "name": "A_3",
        "paramId": "poly/depthOne/depthTwoPolyExposed/depthThree/A_3",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 11,
        "name": "A_1",
        "paramId": "poly/depthOnePoly/A_1",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 12,
        "name": "A_2",
        "paramId": "poly/depthOnePoly/depthTwo/A_2",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 13,
        "name": "A_3",
        "paramId": "poly/depthOnePoly/depthTwo/depthThree/A_3",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 14,
        "name": "A_2",
        "paramId": "poly/depthOnePoly/depthTwoPoly/A_2",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 15,
        "name": "A_3",
        "paramId": "poly/depthOnePoly/depthTwoPoly/depthThree/A_3",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 16,
        "name": "A_2",
        "paramId": "poly/depthOnePoly/depthTwoPolyExposed/A_2",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 17,
        "name": "A_3",
        "paramId": "poly/depthOnePoly/depthTwoPolyExposed/depthThree/A_3",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 18,
        "name": "A_1",
        "paramId": "poly/depthOnePolyExposed/A_1",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 19,
        "name": "1/A_1",
        "paramId": "poly/depthOnePolyExposed/1/A_1",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 20,
        "name": "2/A_1",
        "paramId": "poly/depthOnePolyExposed/2/A_1",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 21,
        "name": "A_2",
        "paramId": "poly/depthOnePolyExposed/depthTwo/A_2",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 22,
        "name": "A_3",
        "paramId": "poly/depthOnePolyExposed/depthTwo/depthThree/A_3",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 23,
        "name": "A_2",
        "paramId": "poly/depthOnePolyExposed/depthTwoPoly/A_2",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 24,
        "name": "A_3",
        "paramId": "poly/depthOnePolyExposed/depthTwoPoly/depthThree/A_3",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 25,
        "name": "A_2",
        "paramId": "poly/depthOnePolyExposed/depthTwoPolyExposed/A_2",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      },
      {
        "type": "ParameterTypeNumber",
        "index": 26,
        "name": "A_3",
        "paramId": "poly/depthOnePolyExposed/depthTwoPolyExposed/depthThree/A_3",
        "minimum": 0,
        "maximum": 1,
        "exponent": 1,
        "steps": 0,
        "initialValue": 0,
        "isEnum": false,
        "enumValues": [],
        "displayName": "",
        "unit": "",
        "order": 0,
        "debug": false,
        "visible": true,
        "signalIndex": null,
        "ioType": "IOTypeUndefined"
      }
    ],
    "numParameters": 27,
    "numSignalInParameters": 0,
    "numSignalOutParameters": 0,
    "numInputChannels": 0,
    "numOutputChannels": 1,
    "numMidiInputPorts": 1,
    "numMidiOutputPorts": 0,
    "externalDataRefs": [],
    "patcherSerial": 0,
    "inports": [],
    "outports": [],
    "inlets": [
      {
        "type": "midi"
      }
    ],
    "outlets": [
      {
        "type": "signal",
        "index": 1,
        "tag": "out1",
        "meta": ""
      }
    ],
    "paramConversion": {
      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.poly[0].getNumParameters()) {\r\n            {\r\n                return this.poly[0].convertToNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.poly[0].getNumParameters()) {\r\n            {\r\n                return this.poly[0].convertFromNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
      "getNumParameters": "function getNumParameters() {\r\n    return 1 + this.poly[0].getNumParameters();\r\n}",
      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.poly[0].getNumParameters()) {\r\n            {\r\n                return this.poly[0].constrainParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
      "subpatches": {
        "poly": {
          "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
          "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_19.getNumParameters())\r\n            return this.p_19.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_19.getNumParameters();\r\n\r\n        if (index < this.p_20[0].getNumParameters()) {\r\n            {\r\n                return this.p_20[0].convertToNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        index -= this.p_20[0].getNumParameters();\r\n\r\n        if (index < this.p_21[0].getNumParameters()) {\r\n            {\r\n                return this.p_21[0].convertToNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
          "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_19.getNumParameters())\r\n            return this.p_19.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_19.getNumParameters();\r\n\r\n        if (index < this.p_20[0].getNumParameters()) {\r\n            {\r\n                return this.p_20[0].convertFromNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        index -= this.p_20[0].getNumParameters();\r\n\r\n        if (index < this.p_21[0].getNumParameters()) {\r\n            {\r\n                return this.p_21[0].convertFromNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
          "getNumParameters": "function getNumParameters() {\r\n    return 1 + this.p_19.getNumParameters() + this.p_20[0].getNumParameters() + this.p_21[0].getNumParameters();\r\n}",
          "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_19.getNumParameters())\r\n            return this.p_19.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_19.getNumParameters();\r\n\r\n        if (index < this.p_20[0].getNumParameters()) {\r\n            {\r\n                return this.p_20[0].constrainParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        index -= this.p_20[0].getNumParameters();\r\n\r\n        if (index < this.p_21[0].getNumParameters()) {\r\n            {\r\n                return this.p_21[0].constrainParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
          "subpatches": {
            "p_19": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_04.getNumParameters())\r\n            return this.p_04.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_04.getNumParameters();\r\n\r\n        if (index < this.p_05[0].getNumParameters()) {\r\n            {\r\n                return this.p_05[0].convertToNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        index -= this.p_05[0].getNumParameters();\r\n\r\n        if (index < this.p_06[0].getNumParameters()) {\r\n            {\r\n                return this.p_06[0].convertToNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_04.getNumParameters())\r\n            return this.p_04.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_04.getNumParameters();\r\n\r\n        if (index < this.p_05[0].getNumParameters()) {\r\n            {\r\n                return this.p_05[0].convertFromNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        index -= this.p_05[0].getNumParameters();\r\n\r\n        if (index < this.p_06[0].getNumParameters()) {\r\n            {\r\n                return this.p_06[0].convertFromNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 1 + this.p_04.getNumParameters() + this.p_05[0].getNumParameters() + this.p_06[0].getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_04.getNumParameters())\r\n            return this.p_04.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_04.getNumParameters();\r\n\r\n        if (index < this.p_05[0].getNumParameters()) {\r\n            {\r\n                return this.p_05[0].constrainParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        index -= this.p_05[0].getNumParameters();\r\n\r\n        if (index < this.p_06[0].getNumParameters()) {\r\n            {\r\n                return this.p_06[0].constrainParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_04": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_01.getNumParameters())\r\n            return this.p_01.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_01.getNumParameters())\r\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 1 + this.p_01.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_01.getNumParameters())\r\n            return this.p_01.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_01": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 1;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_05": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_02.getNumParameters())\r\n            return this.p_02.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_02.getNumParameters())\r\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 1 + this.p_02.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_02.getNumParameters())\r\n            return this.p_02.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_02": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 1;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": true
                },
                "p_06": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n    case 1:\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 3;\r\n\r\n        if (index < this.p_03.getNumParameters())\r\n            return this.p_03.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n    case 1:\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 3;\r\n\r\n        if (index < this.p_03.getNumParameters())\r\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 3 + this.p_03.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 3;\r\n\r\n        if (index < this.p_03.getNumParameters())\r\n            return this.p_03.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_03": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 1;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": true
                }
              },
              "isPolyphonic": false
            },
            "p_20": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_10.getNumParameters())\r\n            return this.p_10.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_10.getNumParameters();\r\n\r\n        if (index < this.p_11[0].getNumParameters()) {\r\n            {\r\n                return this.p_11[0].convertToNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        index -= this.p_11[0].getNumParameters();\r\n\r\n        if (index < this.p_12[0].getNumParameters()) {\r\n            {\r\n                return this.p_12[0].convertToNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_10.getNumParameters())\r\n            return this.p_10.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_10.getNumParameters();\r\n\r\n        if (index < this.p_11[0].getNumParameters()) {\r\n            {\r\n                return this.p_11[0].convertFromNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        index -= this.p_11[0].getNumParameters();\r\n\r\n        if (index < this.p_12[0].getNumParameters()) {\r\n            {\r\n                return this.p_12[0].convertFromNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 1 + this.p_10.getNumParameters() + this.p_11[0].getNumParameters() + this.p_12[0].getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_10.getNumParameters())\r\n            return this.p_10.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_10.getNumParameters();\r\n\r\n        if (index < this.p_11[0].getNumParameters()) {\r\n            {\r\n                return this.p_11[0].constrainParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        index -= this.p_11[0].getNumParameters();\r\n\r\n        if (index < this.p_12[0].getNumParameters()) {\r\n            {\r\n                return this.p_12[0].constrainParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_10": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_07.getNumParameters())\r\n            return this.p_07.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_07.getNumParameters())\r\n            return this.p_07.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 1 + this.p_07.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_07.getNumParameters())\r\n            return this.p_07.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_07": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 1;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_11": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_08.getNumParameters())\r\n            return this.p_08.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_08.getNumParameters())\r\n            return this.p_08.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 1 + this.p_08.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_08.getNumParameters())\r\n            return this.p_08.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_08": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 1;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": true
                },
                "p_12": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_09.getNumParameters())\r\n            return this.p_09.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_09.getNumParameters())\r\n            return this.p_09.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 1 + this.p_09.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_09.getNumParameters())\r\n            return this.p_09.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_09": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 1;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": true
                }
              },
              "isPolyphonic": true
            },
            "p_21": {
              "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
              "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n    case 1:\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 3;\r\n\r\n        if (index < this.p_16.getNumParameters())\r\n            return this.p_16.convertToNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_16.getNumParameters();\r\n\r\n        if (index < this.p_17[0].getNumParameters()) {\r\n            {\r\n                return this.p_17[0].convertToNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        index -= this.p_17[0].getNumParameters();\r\n\r\n        if (index < this.p_18[0].getNumParameters()) {\r\n            {\r\n                return this.p_18[0].convertToNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
              "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n    case 1:\r\n    case 2:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 3;\r\n\r\n        if (index < this.p_16.getNumParameters())\r\n            return this.p_16.convertFromNormalizedParameterValue(index, value);\r\n\r\n        index -= this.p_16.getNumParameters();\r\n\r\n        if (index < this.p_17[0].getNumParameters()) {\r\n            {\r\n                return this.p_17[0].convertFromNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        index -= this.p_17[0].getNumParameters();\r\n\r\n        if (index < this.p_18[0].getNumParameters()) {\r\n            {\r\n                return this.p_18[0].convertFromNormalizedParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
              "getNumParameters": "function getNumParameters() {\r\n    return 3 + this.p_16.getNumParameters() + this.p_17[0].getNumParameters() + this.p_18[0].getNumParameters();\r\n}",
              "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 1:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    case 2:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 3;\r\n\r\n        if (index < this.p_16.getNumParameters())\r\n            return this.p_16.constrainParameterValue(index, value);\r\n\r\n        index -= this.p_16.getNumParameters();\r\n\r\n        if (index < this.p_17[0].getNumParameters()) {\r\n            {\r\n                return this.p_17[0].constrainParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        index -= this.p_17[0].getNumParameters();\r\n\r\n        if (index < this.p_18[0].getNumParameters()) {\r\n            {\r\n                return this.p_18[0].constrainParameterValue(index, value);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n}",
              "subpatches": {
                "p_16": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_13.getNumParameters())\r\n            return this.p_13.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_13.getNumParameters())\r\n            return this.p_13.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 1 + this.p_13.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_13.getNumParameters())\r\n            return this.p_13.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_13": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 1;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": false
                },
                "p_17": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_14.getNumParameters())\r\n            return this.p_14.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_14.getNumParameters())\r\n            return this.p_14.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 1 + this.p_14.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_14.getNumParameters())\r\n            return this.p_14.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_14": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 1;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": true
                },
                "p_18": {
                  "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                  "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_15.getNumParameters())\r\n            return this.p_15.convertToNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_15.getNumParameters())\r\n            return this.p_15.convertFromNormalizedParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "getNumParameters": "function getNumParameters() {\r\n    return 1 + this.p_15.getNumParameters();\r\n}",
                  "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        index -= 1;\r\n\r\n        if (index < this.p_15.getNumParameters())\r\n            return this.p_15.constrainParameterValue(index, value);\r\n\r\n        return value;\r\n    }\r\n}",
                  "subpatches": {
                    "p_15": {
                      "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\r\n    if (steps == 1) {\r\n        if (normalizedValue > 0) {\r\n            normalizedValue = 1.;\r\n        }\r\n    } else {\r\n        let oneStep = 1. / (steps - 1);\r\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\r\n        normalizedValue = numberOfSteps * oneStep;\r\n    }\r\n\r\n    return normalizedValue;\r\n}",
                      "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n            let normalizedValue = (value - 0) / (1 - 0);\r\n            return normalizedValue;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\r\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\r\n\r\n            {\r\n                return 0 + value * (1 - 0);\r\n            }\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "getNumParameters": "function getNumParameters() {\r\n    return 1;\r\n}",
                      "constrainParameterValue": "function constrainParameterValue(index, value) {\r\n    var v = value;\r\n\r\n    switch (index) {\r\n    case 0:\r\n        {\r\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\r\n            return v;\r\n        }\r\n    default:\r\n        return value;\r\n    }\r\n}",
                      "subpatches": {},
                      "isPolyphonic": false
                    }
                  },
                  "isPolyphonic": true
                }
              },
              "isPolyphonic": true
            }
          },
          "isPolyphonic": true
        }
      },
      "isPolyphonic": false
    },
    "presetid": "rnbo",
    "meta": {
      "architecture": "x64",
      "filename": "exportFormatting.maxpat",
      "rnboobjname": "rnbomatic",
      "maxversion": "8.6.0",
      "rnboversion": "1.2.4",
      "name": "untitled"
    }
  },
  "presets": [
    {
      "name": "untitled",
      "preset": {
        "A_0": {
          "value": 0
        },
        "__sps": {
          "poly": [
            {
              "__sps": {
                "depthOne": {
                  "A_1": {
                    "value": 0
                  },
                  "__sps": {
                    "depthTwo": {
                      "A_2": {
                        "value": 0
                      },
                      "__sps": {
                        "depthThree": {
                          "A_3": {
                            "value": 0
                          }
                        }
                      }
                    },
                    "depthTwoPoly": [
                      {
                        "A_2": {
                          "value": 0
                        }
                      },
                      {
                        "A_2": {
                          "value": 0
                        }
                      }
                    ],
                    "depthTwoPolyExposed": [
                      {
                        "/A_2": {
                          "value": 0
                        }
                      },
                      {
                        "/A_2": {
                          "value": 0
                        }
                      }
                    ]
                  }
                },
                "depthOnePoly": [
                  {
                    "A_1": {
                      "value": 0
                    },
                    "__sps": {
                      "depthTwo": {
                        "A_2": {
                          "value": 0
                        }
                      },
                      "depthTwoPoly": [
                        {
                          "A_2": {
                            "value": 0
                          }
                        },
                        {
                          "A_2": {
                            "value": 0
                          }
                        }
                      ],
                      "depthTwoPolyExposed": [
                        {
                          "A_2": {
                            "value": 0
                          }
                        },
                        {
                          "A_2": {
                            "value": 0
                          }
                        }
                      ]
                    }
                  },
                  {
                    "A_1": {
                      "value": 0
                    },
                    "__sps": {
                      "depthTwo": {
                        "A_2": {
                          "value": 0
                        }
                      },
                      "depthTwoPoly": [
                        {
                          "A_2": {
                            "value": 0
                          }
                        },
                        {
                          "A_2": {
                            "value": 0
                          }
                        }
                      ],
                      "depthTwoPolyExposed": [
                        {
                          "A_2": {
                            "value": 0
                          }
                        },
                        {
                          "A_2": {
                            "value": 0
                          }
                        }
                      ]
                    }
                  }
                ],
                "depthOnePolyExposed": [
                  {
                    "/A_1": {
                      "value": 0
                    },
                    "__sps": {
                      "depthTwo": {
                        "A_2": {
                          "value": 0
                        }
                      },
                      "depthTwoPoly": [
                        {
                          "A_2": {
                            "value": 0
                          }
                        },
                        {
                          "A_2": {
                            "value": 0
                          }
                        }
                      ],
                      "depthTwoPolyExposed": [
                        {
                          "A_2": {
                            "value": 0
                          }
                        },
                        {
                          "A_2": {
                            "value": 0
                          }
                        }
                      ]
                    }
                  },
                  {
                    "/A_1": {
                      "value": 0
                    },
                    "__sps": {
                      "depthTwo": {
                        "A_2": {
                          "value": 0
                        }
                      },
                      "depthTwoPoly": [
                        {
                          "A_2": {
                            "value": 0
                          }
                        },
                        {
                          "A_2": {
                            "value": 0
                          }
                        }
                      ],
                      "depthTwoPolyExposed": [
                        {
                          "A_2": {
                            "value": 0
                          }
                        },
                        {
                          "A_2": {
                            "value": 0
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "__sps": {
                "depthOne": {
                  "A_1": {
                    "value": 0
                  },
                  "__sps": {
                    "depthTwo": {
                      "A_2": {
                        "value": 0
                      },
                      "__sps": {
                        "depthThree": {
                          "A_3": {
                            "value": 0
                          }
                        }
                      }
                    },
                    "depthTwoPoly": [
                      {
                        "A_2": {
                          "value": 0
                        }
                      },
                      {
                        "A_2": {
                          "value": 0
                        }
                      }
                    ],
                    "depthTwoPolyExposed": [
                      {
                        "/A_2": {
                          "value": 0
                        }
                      },
                      {
                        "/A_2": {
                          "value": 0
                        }
                      }
                    ]
                  }
                },
                "depthOnePoly": [
                  {
                    "A_1": {
                      "value": 0
                    },
                    "__sps": {
                      "depthTwo": {
                        "A_2": {
                          "value": 0
                        }
                      },
                      "depthTwoPoly": [
                        {
                          "A_2": {
                            "value": 0
                          }
                        },
                        {
                          "A_2": {
                            "value": 0
                          }
                        }
                      ],
                      "depthTwoPolyExposed": [
                        {
                          "A_2": {
                            "value": 0
                          }
                        },
                        {
                          "A_2": {
                            "value": 0
                          }
                        }
                      ]
                    }
                  },
                  {
                    "A_1": {
                      "value": 0
                    },
                    "__sps": {
                      "depthTwo": {
                        "A_2": {
                          "value": 0
                        }
                      },
                      "depthTwoPoly": [
                        {
                          "A_2": {
                            "value": 0
                          }
                        },
                        {
                          "A_2": {
                            "value": 0
                          }
                        }
                      ],
                      "depthTwoPolyExposed": [
                        {
                          "A_2": {
                            "value": 0
                          }
                        },
                        {
                          "A_2": {
                            "value": 0
                          }
                        }
                      ]
                    }
                  }
                ],
                "depthOnePolyExposed": [
                  {
                    "/A_1": {
                      "value": 0
                    },
                    "__sps": {
                      "depthTwo": {
                        "A_2": {
                          "value": 0
                        }
                      },
                      "depthTwoPoly": [
                        {
                          "A_2": {
                            "value": 0
                          }
                        },
                        {
                          "A_2": {
                            "value": 0
                          }
                        }
                      ],
                      "depthTwoPolyExposed": [
                        {
                          "A_2": {
                            "value": 0
                          }
                        },
                        {
                          "A_2": {
                            "value": 0
                          }
                        }
                      ]
                    }
                  },
                  {
                    "/A_1": {
                      "value": 0
                    },
                    "__sps": {
                      "depthTwo": {
                        "A_2": {
                          "value": 0
                        }
                      },
                      "depthTwoPoly": [
                        {
                          "A_2": {
                            "value": 0
                          }
                        },
                        {
                          "A_2": {
                            "value": 0
                          }
                        }
                      ],
                      "depthTwoPolyExposed": [
                        {
                          "A_2": {
                            "value": 0
                          }
                        },
                        {
                          "A_2": {
                            "value": 0
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    }
  ],
  "src": [
    {
      "code": "",
      "compression": "zlib",
      "encoding": "base64",
      "type": "wasm"
    }
  ]
}